/*
 *   the_depths.c
 *
 *  MAIN GAME FILE
 *
 * Meant to be 100 randomly generated levels
 * Minimal graphics.  
 * Try to get as deep as possible
 *
 *  Version in progress: 0.3
 */

#include "neslib.h"
#include "utils.h"


// ==================== CONSTANTS ============================================

//  GAME FEATURES
#define DEV_MODE 1

#define FOG_MODE 1

//-------------------------------------- UNUSED
#define NTSC_FPS 60 
// ------------------------------------- Player movement speed
#define STEP 1            
// --------------------------------------UNUSED
#define INITIAL_HEALTH 5
#define INITIAL_POWER 1

#define PLAYER_SPRITE 0x40
#define PLAYER_ATTRIBUTE 0x00
#define PLAYER_WIDTH 6
#define PLAYER_HEIGHT 6

// Special LEVELS
#define SURFACE_LEVEL 1

// different game modes
#define GAME_MODE 0
#define INVENTORY_MODE 5

//  LEVEL GENERATION CONSTANTS
//   these should be moved to their own file to indicate which are tunable
#define MAX_ROOM_ATTEMPTS 80
#define MAX_ROOMS 10
#define MAX_ROOM_WIDTH 9
#define MAX_ROOM_HEIGHT 9
#define MIN_ROOM_WIDTH 3
#define MIN_ROOM_HEIGHT 3
// setting a border all the way around of 2 tiles
#define LEFT_BORDER 2
#define MAX_WIDTH 30
#define TOP_BORDER 2
#define MAX_HEIGHT 28

// For horizontal scrolling there are 2 namestables
#define LEVEL_WIDTH  32
#define LEVEL_HEIGHT 30


// individual rooms (includes the wall)
#define ROOM_WIDTH  6
#define ROOM_HEIGHT 5
#define ROOMS_WIDE 5
#define ROOMS_HIGH 5

// Object types (these match to tiles in CHR)
// Only 8 types.  Upper 4 bits indicate tunnel values
#define EMPTY 0
#define STAIRS_DOWN 1
#define STAIRS_UP 2
#define STONE     3
#define TREASURE  4
#define RANDOM    5
#define NO_OBJ    6
// Room for lots more...
#define UNSET 0x0F

#define FOG_TILE 10

// Sound effects
#define LEVEL_SOUND 1
#define LEVEL_CHANNEL 2

#define TREASURE_SOUND 2
#define TREASURE_CHANNEL 2

#define REVEAL_ROOM_SOUND 3
#define REVEAL_ROOM_CHANNEL 2

#define ERROR_SOUND 4
#define ERROR_CHANNEL 2


// for displaying health, level and score
// We may show health and scores using different sprites (ie: hearts)
#define NUMBER_SPRITE_OFFSET 0x10
#define HEALTH_SPRITE_OFFSET 0x20
#define POWER_SPRITE_OFFSET 0x20
#define BLANK_SPRITE 0x3B
#define BLANK_HEALTH 0x20
#define BLANK_POWER 0x20

// BITMASKS for TUNNEL DIRECTIONS
#define TUNNEL_UP    0x10
#define TUNNEL_RIGHT 0x20
#define TUNNEL_DOWN  0x40
#define TUNNEL_LEFT  0x80


// =========================== MACROS =========================================
// NAMETABLE updates per frame
#define NTADR(x,y)      ((0x2000|((y)<<5)|x))
#define MSB(x)          (((x)>>8))
#define LSB(x)          (((x)&0xff))


// =========================== VARIABLES =========================================
//generic vars
static unsigned char spr;
static unsigned char i,j,k;
static unsigned char lastPad, pad;
static unsigned char lastRoomX, lastRoomY;
static unsigned char game_mode;

// player vars
static unsigned char player_x, player_y;
static unsigned char player_sprite, player_attribute;
int player_health;
int player_power;
int level;
int score;

// This is a update-per-frame queue for VRAM
// It splits many updates during vblank over several
// frame updates
// 120 size means 40 chars
#define SIZEOF_QUEUE 120
unsigned char* vram_read_ptr;
unsigned char* vram_write_ptr;
unsigned char vram_queue[SIZEOF_QUEUE];

// large map for the active level
unsigned char grid[LEVEL_WIDTH][LEVEL_HEIGHT];

typedef struct
{
	unsigned char xmin;
	unsigned char xmax;
	unsigned char ymin;
	unsigned char ymax;
} Room;

Room rooms[MAX_ROOMS];

unsigned char num_rooms;




// =========================== CONST DATA =========================================
//palette for sprites
const unsigned char palSprites[16]={
	0x0f,0x17,0x27,0x37,
	0x0f,0x11,0x21,0x31,
	0x0f,0x15,0x25,0x35,
	0x0f,0x19,0x29,0x39
};

// Starts placing the 3 digit level at coordinates: 4,2  .. 6,2
// NTADR(4,2)
#define LEVEL_POSITION_X 4
#define LEVEL_POSITION_Y 2
#define NUM_LEVEL_SPRITES 3
static unsigned char level_oam[NUM_LEVEL_SPRITES];

// ======================= UNDER CONSTRUCTION =======================
// ------------ MOB variables, constants and utility methods -------
// THIS WILL BE MOVED AROUND LATER 
// referred to this page for help on struct in cc65
// http://kkfos.aspekt.fi/projects/nes/libraries/knes-library-for-cc65/

#define MOB_UNSET 0
#define MOB_DORMANT 1
#define MOB_ACTIVE 2
#define MOB_DEAD 3


#define MAX_MOBS 3
struct MOBS {
  unsigned char mobstate[MAX_MOBS];
  unsigned char mobtype[MAX_MOBS];
  unsigned char x[MAX_MOBS];
  unsigned char y[MAX_MOBS];
  unsigned char ai[MAX_MOBS];
};
struct MOBS mobs; // create the mobs memory

void clearMobs(){
 unsigned char m;
 for (m=0;m<MAX_MOBS;m++) {
    mobs.mobstate[m] = MOB_UNSET;
 }
}
// ---- END of mobs  code --------------------------------------------



void updateLevelSprites(){
    // 3 digit level. 
    int x = level;
    signed char pos = NUM_LEVEL_SPRITES-1;

    while(pos >=0 ) {
      if(x > 0) {
        level_oam[pos] = NUMBER_SPRITE_OFFSET + (x % 10);
        x = x / 10;
       } else {
         level_oam[pos] = BLANK_SPRITE;
       }
      --pos;
    }

}

unsigned char checkBoxIntersection(unsigned char x1min, unsigned char y1min, unsigned char x1max, unsigned char y1max) {
	unsigned char x2min, y2min, x2max, y2max;
	for(j=0;j<num_rooms;j++){
	    x2min = rooms[j].xmin;
	    y2min = rooms[j].ymin;
	    x2max = rooms[j].xmax;
	    y2max = rooms[j].ymax;
	    if (x1min < x2max && x2min < x1max && y1min < y2max && y2min < y1max) {
                return TRUE;
	    }
	}
	level++;
	// none of the existing rooms overlap
	return FALSE;
}

void drawCorridor(unsigned char x1,unsigned char y1, unsigned char x2, unsigned char y2)
{
    unsigned char lastMidX = x1;
    unsigned char lastMidY = y1;
    unsigned char nextMidX = x2;
    unsigned char nextMidY = y2;

    grid[lastMidX][lastMidY] = EMPTY;
    while((lastMidX != nextMidX) || (lastMidY != nextMidY)) {
      if(lastMidX > nextMidX) {
        lastMidX--;
      } else if(lastMidX < nextMidX){
        lastMidX++;
      } else if(lastMidY > nextMidY) {
        lastMidY--;
      } else {
	lastMidY++;
      }
      grid[lastMidX][lastMidY] = EMPTY;
    }

}

void generateLevel(unsigned char startObj, unsigned char endObj)
{
    unsigned char rx,ry,rw,rh;
    unsigned char lastMidX,lastMidY,nextMidX,nextMidY;
    // Temporary step: make the entire map stone.
    // Will convert to metatiles to allow larger maps and scrolling
    for (j=0;j<LEVEL_HEIGHT;j++) {
        for (i=0;i<LEVEL_WIDTH;i++) {
	    grid[i][j] = STONE;
	}
    }

    
    // Step 1: generate rooms
    // use k for room generation attempts 
    // 0,0 is top left of screen
    // rx = room top left X
    // ry = room top left Y
    // rw = room width
    // rh = room height
    num_rooms = 0;
    level = 0;

    k=MAX_ROOM_ATTEMPTS;
    while(k>0) {
        k--;
	rx = (rand8() % (MAX_WIDTH - MIN_ROOM_WIDTH)) + LEFT_BORDER;
	rw = (rand8() % MAX_ROOM_WIDTH) + MIN_ROOM_WIDTH;
	if ((rx + rw) > MAX_WIDTH) {
            continue;
	}
	ry = (rand8() % (MAX_HEIGHT - MIN_ROOM_HEIGHT)) + TOP_BORDER;
	rh = (rand8() % MAX_ROOM_HEIGHT) + MIN_ROOM_HEIGHT;
	if ((ry + rh) > MAX_HEIGHT) {
            continue;
	}
	// returns TRUE if these room values intersect an existing room
	if (checkBoxIntersection(rx,ry,rx+rw,ry+rh) ){
	    continue;
	}
	rooms[num_rooms].xmin = rx;
	rooms[num_rooms].ymin = ry;
	rooms[num_rooms].xmax = rx+rw;
	rooms[num_rooms].ymax = ry+rh;
	num_rooms++;

	if (num_rooms >= MAX_ROOMS){
	  break;
	}
    }

    // temp.  Let me draw these rooms
    for(k=0;k<num_rooms;k++){
	rx = rooms[k].xmin;
	ry = rooms[k].ymin;
	rw = rooms[k].xmax;
	rh = rooms[k].ymax;
	// temporarily using the level variable to see how many rooms are created
	// temporarily draw rooms here
	for(j=ry;j<rh;j++) {
	    for(i=rx;i<rw;i++) {
                //grid[i][j] = NUMBER_SPRITE_OFFSET + k; // EMPTY;
                grid[i][j] = EMPTY;
	    }
	}

	if(k==0){
	    player_x = (rx + 1) << 3 ;
	    player_y = (ry + 1) << 3 ;
            lastMidX = (rx+rw)/2;
            lastMidY = (ry+rh)/2;
	} else {
	  // draw corridor from last mid to next mid
          nextMidX = (rx+rw)/2;
          nextMidY = (ry+rh)/2;
	  drawCorridor(lastMidX,lastMidY,nextMidX,nextMidY);
          lastMidX = nextMidX;
          lastMidY = nextMidY;
	}
    }

    // Step 2: generate corridors
    // temp. I will simply create a corridor between each room in order

    // draw static text
    updateLevelSprites();

    // set the player somewhere..
}


void setAndDraw(signed char u, signed char v, signed char val) {
    if(vram_write_ptr +3 == vram_read_ptr) {
      // queue is full.  Cannot add more to it
      // until we process some of what is queued up
      sfx_play(ERROR_SOUND, ERROR_CHANNEL);
      return;
    }
    grid[u][v] = val;
    *(vram_write_ptr++) = MSB(NTADR(u,v));
    *(vram_write_ptr++) = LSB(NTADR(u,v));
    *(vram_write_ptr++) = val;
    // If we reach the end, wrap around to the start.
    if(vram_write_ptr >= (vram_queue + SIZEOF_QUEUE)) {
      vram_write_ptr = vram_queue;
    }
}


unsigned char getRandomItem() {
 // this needs a lot of work
  unsigned char randItem = rand8() % 4;
  if (randItem == 0){
     return TREASURE;
  } else {
    return EMPTY;
  }

  
}

// This method must be invoked while ppu display is OFF
void drawLevel(unsigned char target) {
  for (j=0;j<LEVEL_HEIGHT;j++) {
    for (i=0;i<LEVEL_WIDTH;i++) {
      vram_adr(NTADR(i,j)); // left border
      vram_put(grid[i][j]);
    }
  }

  //  DRAW STARTING ROOM based on the passed in target.
  //  PUT the player there as well
  player_sprite = PLAYER_SPRITE;  
  player_attribute=PLAYER_ATTRIBUTE;

  // Draw text info:
  //vram_adr(NTADR(LEVEL_POSITION_X, LEVEL_POSITION_Y));
  //for(j=0; j<NUM_LEVEL_SPRITES; j++) {
  //    vram_put(level_oam[j]);
  //}
    
}


// Usually a level starts with stairs up, and ends with stairs down
void loadLevel(unsigned char startObj, unsigned char endObj)
{
   // turn off display
   ppu_off();

   // clear any previous sprites
   oam_clear();

   // TO DO: if we have never seen this level before generate a random level
   generateLevel(startObj, endObj);
   drawLevel(startObj);

   ppu_on_all();
   sfx_play(LEVEL_SOUND, LEVEL_CHANNEL);
}

void generateStartingLevel() {
  level=SURFACE_LEVEL;
  loadLevel(NO_OBJ, STAIRS_DOWN);
}

void generateNextLevel() {
  level+=1;
  loadLevel(STAIRS_UP, STAIRS_DOWN);
}

void generatePreviousLevel() {
  level-=1;
  if (level == SURFACE_LEVEL) {
     // cannot go beyond SURFACE 
     loadLevel(STAIRS_DOWN, NO_OBJ);
  } else {
     loadLevel(STAIRS_DOWN, STAIRS_UP);
  }
}

void gameOver() {
        // TO DO: show game over screen
	ppu_on_all();//enable rendering
	while(1) {
		ppu_waitnmi();//wait for next TV frame
                pad = pad_poll(0);
        	if (pad & PAD_START) {
                   // start was pressed
                   break;
		}
	}
	reset();
}

unsigned char clipCheck(unsigned char x, unsigned char y) {
  return grid[x>>3][y>>3];
}


void claimTreasure(unsigned char tx, unsigned char ty) {
  // random amount of treasure based on the level
  score += ((rand8() % level)+1);
  // clear the treasure from the screen
  setAndDraw(tx,ty,EMPTY);
  // update the overall amount of gold the player has
  //updateTreasure();
  
  // indicate using sound that we got some treasure
  sfx_play(TREASURE_SOUND, TREASURE_CHANNEL);
}


void handleInteraction(unsigned char px, unsigned char py, unsigned char val) {
  switch(val) {
   case STAIRS_UP:
    generatePreviousLevel();
    break;
   case STAIRS_DOWN:
    generateNextLevel();
    break;
   case FOG_TILE:
     // revealRoom(px,py);
    break;
   case TREASURE:
    claimTreasure(px>>3, py>>3);
    break;
  }
}


// may need to add additional clip checks rather than right single points
void moveLeft(void) 
{
  unsigned char val = clipCheck(player_x - STEP, player_y + PLAYER_HEIGHT);
  if (val != STONE) {
     player_x-=STEP;
     handleInteraction(player_x, player_y + PLAYER_HEIGHT, val);
  }
}

void moveRight(void) 
{
  unsigned char val = clipCheck(player_x + PLAYER_WIDTH + STEP, player_y + PLAYER_HEIGHT);
  if (val != STONE) {
     player_x+=STEP;
     handleInteraction(player_x + PLAYER_WIDTH, player_y + PLAYER_HEIGHT, val);
  }
}

void moveUp(void) 
{
  unsigned char val = clipCheck(player_x, player_y-STEP);
  if (val != STONE) {
     player_y-=STEP;
     handleInteraction(player_x + (PLAYER_WIDTH/2), player_y + PLAYER_HEIGHT, val);
  }
}

void moveDown(void) 
{
  unsigned char val = clipCheck(player_x, player_y+PLAYER_HEIGHT+STEP);
  if (val != STONE) {
     player_y+=STEP;
     handleInteraction(player_x + (PLAYER_WIDTH/2), player_y + PLAYER_HEIGHT, val);
  }
}

void checkAttack(void) 
{
}

void processInventory(void) 
{
    // UNDER CONSTRUCTION
    // game is paused while the player deals with inventory issues.
    // START resumes game
    // other controls manipulate inventory
    if (pad & PAD_START) {
        game_mode = GAME_MODE;
#ifdef DEV_MODE
	// load a new level
        generateNextLevel(); 
#endif
    }
}

void processGame() {

 // Step 1: get player input


  if (pad & PAD_START) {
      // inventory mode.  same as pausing
      game_mode = INVENTORY_MODE;
      return;
  }

   if (pad & PAD_A) {
       // attack mode.  player cannot move while attacking
       checkAttack();
   }
   // movement
   if(pad & PAD_LEFT) {
        moveLeft();
   } else if(pad & PAD_RIGHT){
      moveRight();
   }

   if(pad & PAD_UP) {
    moveUp();
   } else if(pad & PAD_DOWN){
    moveDown();
   }

  // deal with player attack
  // deal with enemy attacks
  // deal with enemy movement

}

// This method updates chunks of vram
void showStatusSprites(){
 if(vram_read_ptr != vram_write_ptr){
   if(vram_read_ptr + 15 <= vram_write_ptr){
     // try 5 bytes
     set_vram_update(5,vram_read_ptr);
     vram_read_ptr += 15;
   } else if(vram_read_ptr + 9 < vram_write_ptr){
     // try 3 bytes
     set_vram_update(3,vram_read_ptr);
     vram_read_ptr += 9;
   } else {
     // do a single byte
     set_vram_update(1,vram_read_ptr);
     vram_read_ptr += 3;
   }
   // handle wrap around
   if(vram_read_ptr > vram_queue + SIZEOF_QUEUE) {
     vram_read_ptr = vram_queue;
   }
 } else {
   // reset the rotating queue
   vram_read_ptr = vram_queue;
   vram_write_ptr = vram_queue;
 }
}



void main(void)
{
	// initialize read and write pointers to start of queue
        vram_read_ptr = vram_queue;
        vram_write_ptr = vram_queue;

        // --------------------------------------------------------------------------------------
        // PHASE 1:  TITLE SCREEN
        // TO DO:  Add title screen
        // TO DO: populate random number seed based on time taken to begin game from title screen
        // --------------------------------------------------------------------------------------
	// ppu_on_all();//enable rendering


        
        // --------------------------------------------------------------------------------------
        // PHASE 2:  Start Game at level 0

        // setup starting attributes
        game_mode = GAME_MODE;

        level = SURFACE_LEVEL;
        player_health = INITIAL_HEALTH;
        player_power = INITIAL_POWER;
        score = 0;

        // setup palette
        ppu_on_all();
	pal_spr(palSprites);
        pal_bg(palSprites);

	/*
#ifdef DEV_MODE
	// this code regenerate random number generator over and over
	//  under start button is pressed.
	while(1) {
		ppu_waitnmi();//wait for next TV frame
                lastPad = pad;
                pad = pad_poll(0);
		rand8();
                if (pad & PAD_START) {
			break;
		}
	}
#endif
	*/

        generateStartingLevel();

        // Main Game loop

        pad = 0;
	while(1)
	{
                // -- game loop --
		ppu_waitnmi();//wait for next TV frame
		spr=0;

		spr=oam_spr(player_x,player_y,player_sprite,player_attribute, spr);
                // perform VRAM queue processing
                showStatusSprites();

                // need to make sure we clear out dead enemies
		//iterate over active enemies and set a sprite for current enemy
		//spr=oam_spr(enemy_x[i],enemy_y[i],0xA0 + enemy_sprite[i],i&3,spr);// i&3 is palette


                // end game if player is DEAD
                if (player_health == 0) {
		    gameOver();
		    break;
                }

                // strobe joypad to get input
                // store last strobe and compare for changes

                lastPad = pad;
                pad = pad_poll(0);
                if (game_mode ==  INVENTORY_MODE) {
                  processInventory();
                } else {
                  processGame();
                }

#ifdef DEV_MODE
		showLine();
#endif
	}
}
